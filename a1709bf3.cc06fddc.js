(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{104:function(e,n,t){"use strict";t.d(n,"a",(function(){return l})),t.d(n,"b",(function(){return m}));var r=t(0),o=t.n(r);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=o.a.createContext({}),d=function(e){var n=o.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},l=function(e){var n=d(e.components);return o.a.createElement(c.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},u=o.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,a=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),l=d(t),u=r,m=l["".concat(a,".").concat(u)]||l[u]||b[u]||i;return t?o.a.createElement(m,s(s({ref:n},c),{},{components:t})):o.a.createElement(m,s({ref:n},c))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,a=new Array(i);a[0]=u;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var c=2;c<i;c++)a[c]=t[c];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},178:function(e,n,t){"use strict";t.r(n),n.default=t.p+"assets/images/boards-extending-overview-de08731e8bdadc2b97de607138377c86.png"},82:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return a})),t.d(n,"metadata",(function(){return s})),t.d(n,"rightToc",(function(){return p})),t.d(n,"default",(function(){return d}));var r=t(2),o=t(6),i=(t(0),t(104)),a={id:"extending-boards",title:"Extending Boards"},s={unversionedId:"extensions/extending-boards",id:"extensions/extending-boards",isDocsHomePage:!1,title:"Extending Boards",description:"The GitHub, Kaggle, RStudio Connect and Website boards provide access to popular Data Science storage services; however, there can be many other interesting services to store resources through pins. For instance, Amazon S3, Amazon Glacier, Azure Blobs, Google File System and Hadoop, just to name a few. While those are not natively implemented in the pins package, you can create packages that extend pins to support many other services through custom boards.",source:"@site/docs/extensions/extending-boards.md",slug:"/extensions/extending-boards",permalink:"/pins/docs/extensions/extending-boards",editUrl:"https://github.com/mlverse/pins/edit/master/website/docs/extensions/extending-boards.md",version:"current",sidebar:"docs",previous:{title:"Extending Pins",permalink:"/pins/docs/extensions/extending-pins"},next:{title:"Introduction",permalink:"/pins/docs/use-cases/introduction"}},p=[{value:"Example",id:"example",children:[]}],c={rightToc:p};function d(e){var n=e.components,a=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},c,a,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"The GitHub, Kaggle, RStudio Connect and Website boards provide access to popular Data Science storage services; however, there can be many other interesting services to store resources through pins. For instance, Amazon S3, Amazon Glacier, Azure Blobs, Google File System and Hadoop, just to name a few. While those are not natively implemented in the ",Object(i.b)("inlineCode",{parentName:"p"},"pins")," package, you can create packages that extend ",Object(i.b)("inlineCode",{parentName:"p"},"pins")," to support many other services through custom boards."),Object(i.b)("p",null,"For the purpose of creating custom boards, it helps to understand a board as a collection of files stored with a given name. It closely resembles a simple file systems, but it only requires the following operations to be implemented: create, get, find and remove. For read-only storage locations, you can also decide to implement only the 'get' and 'find' operations."),Object(i.b)("p",null,Object(i.b)("img",{src:t(178).default})),Object(i.b)("p",null,"The most important S3 methods that your board needs to support are ",Object(i.b)("inlineCode",{parentName:"p"},"board_pin_create()"),", ",Object(i.b)("inlineCode",{parentName:"p"},"board_pin_get()"),", ",Object(i.b)("inlineCode",{parentName:"p"},"board_pin_find()")," and ",Object(i.b)("inlineCode",{parentName:"p"},"board_pin_remove()")," which define how to create, get, find and remove a pin."),Object(i.b)("p",null,"The next S3 method to consider implementing is ",Object(i.b)("inlineCode",{parentName:"p"},"board_initialize()")," which is optional to implement but provides support for initialization, this method usually deals with authentication."),Object(i.b)("p",null,"The last function to consider implementing is ",Object(i.b)("inlineCode",{parentName:"p"},"board_browse()"),", this function is used to browse to the location of the board. Usually implemented by calling ",Object(i.b)("inlineCode",{parentName:"p"},"browseURL()")," to open to website of the service hosting the custom board."),Object(i.b)("p",null,"To make this a bit more clear, the following section implements a custom board based on folders."),Object(i.b)("h2",{id:"example"},"Example"),Object(i.b)("p",null,"The following example creates a simple folder-based board, which stores pins in local folders, this is similar to the default 'local' board. It is advisable to create an R package that provides these methods, but you can also define them in a plain R script:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-r"}),'board_initialize.folder <- function(board, ...) {\n  if (!dir.exists("pins")) dir.create("pins")\n  board\n}\n\nboard_pin_create.folder <- function(board, path, name, ...) {\n  dir.create(file.path("pins", name), recursive = TRUE, showWarnings = FALSE)\n  file.copy(dir(path, full.names = TRUE), file.path("pins", name), recursive = TRUE)\n}\n\nboard_pin_get.folder <- function(board, name, ...) {\n  file.path("pins", name)\n}\n\nboard_pin_find.folder <- function(board, text, ...) {\n  data.frame(name = dir("pins", text), stringsAsFactors = F)\n}\n\nboard_pin_remove.folder <- function(board, name, ...) {\n  unlink(file.path("pins", name), recursive = TRUE)\n}\n')),Object(i.b)("p",null,"To extend ",Object(i.b)("inlineCode",{parentName:"p"},"pins")," in a separate package, make sure to export the s3 generics from ",Object(i.b)("inlineCode",{parentName:"p"},"pins"),". For example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-r"}),"#' @importFrom pins board_initialize\n#' @export\npins::board_initialize\n\n#' @importFrom pins board_pin_create\n#' @export\npins::board_pin_create\n\n#' @importFrom pins board_pin_get\n#' @export\npins::board_pin_get\n\n#' @importFrom pins board_pin_find\n#' @export\npins::board_pin_find\n\n#' @importFrom pins board_pin_remove\n#' @export\npins::board_pin_remove\n")))}d.isMDXComponent=!0}}]);