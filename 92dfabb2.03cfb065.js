(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{104:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return h}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var b=a.a.createContext({}),l=function(e){var t=a.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return a.a.createElement(b.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,b=c(e,["components","mdxType","originalType","parentName"]),u=l(n),d=r,h=u["".concat(o,".").concat(d)]||u[d]||p[d]||i;return n?a.a.createElement(h,s(s({ref:t},b),{},{components:n})):a.a.createElement(h,s({ref:t},b))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var b=2;b<i;b++)o[b]=n[b];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},174:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/boards-github-token-2084b035b9fabe1ff8e8fcf12baf8bff.png"},175:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/boards-github-repo-f942132aa813c6952cc6101b64181dbc.png"},176:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/boards-github-sharing-366be9127d2c465664987a1d9ba8b349.png"},177:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/boards-github-release-ffdf8960df31e085d19a8ad967495b3c.png"},81:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return l}));var r=n(2),a=n(6),i=(n(0),n(104)),o={id:"github",title:"Using GitHub Boards",sidebar_label:"GitHub"},s={unversionedId:"boards/github",id:"boards/github",isDocsHomePage:!1,title:"Using GitHub Boards",description:"Registering",source:"@site/docs/boards/github.md",slug:"/boards/github",permalink:"/pinsjs/docs/boards/github",editUrl:"https://github.com/mlverse/pins/edit/master/website/docs/boards/github.md",version:"current",sidebar_label:"GitHub",sidebar:"docs",previous:{title:"Using DigitalOcean Boards",permalink:"/pinsjs/docs/boards/digital-ocean"},next:{title:"Using Google Cloud Boards",permalink:"/pinsjs/docs/boards/google-cloud"}},c=[{value:"Registering",id:"registering",children:[]},{value:"Pinning",id:"pinning",children:[]},{value:"Discovering",id:"discovering",children:[]},{value:"Sharing",id:"sharing",children:[{value:"Large Files",id:"large-files",children:[]}]}],b={rightToc:c};function l(e){var t=e.components,o=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},b,o,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"registering"},"Registering"),Object(i.b)("p",null,"In order to use GitHub as a ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"/"}),"board"),", you should first authenticate. If you are familiar with GitHub and is already part of your workflow, is likely that you'll have a ",Object(i.b)("inlineCode",{parentName:"p"},"GITHUB_PAT")," environment variable already configured. You can check if GitHub is already configured by running:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-r"}),'nchar(Sys.getenv("GITHUB_PAT")) > 0\n')),Object(i.b)("p",null,"If the above statement is ",Object(i.b)("inlineCode",{parentName:"p"},"TRUE"),", this means GitHub is already configured, which means you can register an existing GitHub board as follows. However, when using a new repo, first manually create an empty repo from ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/new"}),"github.com/new"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-r"}),'library(pins)\nboard_register_github(repo = "owner/repo")\n')),Object(i.b)("p",null,"Usually, you will want to set ",Object(i.b)("inlineCode",{parentName:"p"},"owner")," to be your GitHub username or an organization name you belong to, learn more ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://help.github.com/en/articles/about-repositories"}),"About Repositories")," in the GitHub docs."),Object(i.b)("p",null,"Notice that ",Object(i.b)("inlineCode",{parentName:"p"},"board_register_github()")," is just an alias with named parameters to ",Object(i.b)("inlineCode",{parentName:"p"},"board_register()"),"; the previous code is equivalent to:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-r"}),'board_register("github", repo = "owner/repo")\n')),Object(i.b)("p",null,"Alternatively, you can create a GitHub token at ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/settings/tokens/new"}),"github.com/settings/tokens/new")," with the required permissions to access your repo. For public repos, you only need the ",Object(i.b)("inlineCode",{parentName:"p"},"public_repo")," scope:"),Object(i.b)("p",null,Object(i.b)("img",{src:n(174).default})),Object(i.b)("p",null,"Once the token is created, you can register your GitHub board through:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-r"}),'board_register_github(repo = "owner/repo", token = "<new-token>")\n')),Object(i.b)("p",null,"This completes the board registration process, you can now focus on using and sharing pins in GitHub."),Object(i.b)("h2",{id:"pinning"},"Pinning"),Object(i.b)("p",null,"Let's start by creating to pins for ",Object(i.b)("inlineCode",{parentName:"p"},"iris")," and ",Object(i.b)("inlineCode",{parentName:"p"},"mtcars")," under the GitHub board,"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-r"}),'pin(iris, description = "The iris data set", board = "github")\npin(mtcars, description = "The motor trend cars data set", board = "github")\n')),Object(i.b)("p",null,"Notice then the structure in the GitHub repo. Similar to the folder structure in the local board, a folder is created for each pin and a ",Object(i.b)("inlineCode",{parentName:"p"},"data.txt")," index added to the repo."),Object(i.b)("p",null,Object(i.b)("img",{src:n(175).default})),Object(i.b)("p",null,"You can also retrieve pins back from this repo using the now familiar ",Object(i.b)("inlineCode",{parentName:"p"},"pin_get()")," function,"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-r"}),'pin_get("iris", board = "github")\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{}),"# A tibble: 150 x 5\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n          <dbl>       <dbl>        <dbl>       <dbl> <fct>\n 1          5.1         3.5          1.4         0.2 setosa\n 2          4.9         3            1.4         0.2 setosa\n 3          4.7         3.2          1.3         0.2 setosa\n 4          4.6         3.1          1.5         0.2 setosa\n 5          5           3.6          1.4         0.2 setosa\n 6          5.4         3.9          1.7         0.4 setosa\n 7          4.6         3.4          1.4         0.3 setosa\n 8          5           3.4          1.5         0.2 setosa\n 9          4.4         2.9          1.4         0.2 setosa\n10          4.9         3.1          1.5         0.1 setosa\n# \u2026 with 140 more rows\n")),Object(i.b)("h2",{id:"discovering"},"Discovering"),Object(i.b)("p",null,"You can then search pins in your repo using ",Object(i.b)("inlineCode",{parentName:"p"},"pin_find()"),", which by default search all boards but you can also explicitly request to use this particular GitHub board:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-r"}),'pin_find("motor", board = "github")\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{}),"# A tibble: 1 x 4\n  name   description                   type  board\n  <chr>  <chr>                         <chr> <chr>\n1 mtcars The motor trend cars data set table github\n")),Object(i.b)("p",null,"GitHub boards contain extended fields that go beyond the fields ",Object(i.b)("inlineCode",{parentName:"p"},"pins")," requires, to retrieve all the additional fields use ",Object(i.b)("inlineCode",{parentName:"p"},"extended = TRUE"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-r"}),'pin_find("data", board = "github", extended = TRUE)\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{}),"# A tibble: 2 x 7\n  name   description                   type  path    rows  cols board\n  <chr>  <chr>                         <chr> <chr>  <int> <int> <chr>\n1 iris   The iris data set             table iris     150     5 github\n2 mtcars The motor trend cars data set table mtcars    32    11 github\n")),Object(i.b)("p",null,"Or ",Object(i.b)("inlineCode",{parentName:"p"},"pin_info()")," to retrieve all the information associated with a particular pin,"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-r"}),'pin_info("mtcars", board = "github")\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{}),"# Source: github<mtcars> [table]\n# Description: The motor trend cars data set\n# Extended:\n#   - path: data.csv, data.rds\n#   - rows: 32\n#   - cols: 11\n#   - columns:\n#     - mpg: numeric\n#     - cyl: numeric\n#     - disp: numeric\n#     - hp: numeric\n#     - drat: numeric\n#     - wt: numeric\n#     - qsec: numeric\n#     - vs: numeric\n#     - am: numeric\n#     - gear: numeric\n#     - carb: numeric\n")),Object(i.b)("p",null,"Notice that the given 'motor' search keyword is searched in the name and description fields for the pins available in this repo."),Object(i.b)("h2",{id:"sharing"},"Sharing"),Object(i.b)("p",null,"When working in teams, you might want to share your pins with others. For GitHub boards, this is accomplished by adding collaborators through the GitHub website."),Object(i.b)("p",null,Object(i.b)("img",{src:n(176).default})),Object(i.b)("p",null,"Once your collaborators gain access to the repo, they can follow the same steps to register the same GitHub board to allow them to upload and download pins with ease."),Object(i.b)("h3",{id:"large-files"},"Large Files"),Object(i.b)("p",null,"A GitHub repo only supports files under 25MB in size (100MB in theory but there is additional overhead when using the GitHub API). To store large files, GitHub ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://help.github.com/en/articles/distributing-large-binaries"}),"recommends")," storing them using GitHub Releases which support up to 2GB files."),Object(i.b)("p",null,"Therefore, to support large files, ",Object(i.b)("inlineCode",{parentName:"p"},"pins")," makes use of GitHub release files. When you upload a file over , ",Object(i.b)("inlineCode",{parentName:"p"},"pins")," will create a new GitHub release file for that particular pin. Everything else works as expected, you can still retrieve the large resource with ",Object(i.b)("inlineCode",{parentName:"p"},"pin_get()")," and find it with ",Object(i.b)("inlineCode",{parentName:"p"},"pin_find()"),". The only noticeable change is new releases being created in your repo:"),Object(i.b)("p",null,Object(i.b)("img",{src:n(177).default})),Object(i.b)("p",null,"You can configure the 25MB check to use release files with the ",Object(i.b)("inlineCode",{parentName:"p"},"pins.github.release")," option."))}l.isMDXComponent=!0}}]);